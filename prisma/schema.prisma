generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  roleID                Int
  name                  String?
  avatar                String?
  email                 String
  phone                 String?
  password              String?
  status                UserStatusEnum       @default(ACTIVE)
  oauthProvider         String?
  oauthID               String?
  isDeleted             Boolean              @default(false)
  createdAt             DateTime             @default(now())
  createdBy             Int?
  updatedAt             DateTime?            @updatedAt
  updatedBy             Int?
  Address               Address[]
  receivedNotifications Notification[]       @relation("ReceivedNotifications")
  sentNotifications     Notification[]       @relation("SentNotifications")
  PasswordReset         PasswordReset?
  ProductComment        ProductComment[]
  ProductCommentLike    ProductCommentLike[]
  ProductLike           ProductLike[]
  ProductReview         ProductReview[]
  SellerProfile         SellerProfile?
  ShopFollower          ShopFollower[]
  ShopReview            ShopReview[]
  ShopStaff             ShopStaff[]
  Role                  Role                 @relation(fields: [roleID], references: [id], onDelete: Cascade)

  @@unique([email, oauthProvider])
}

model Address {
  id        Int       @id @default(autoincrement())
  userID    Int
  fullName  String
  phone     String?
  province  String?
  district  String?
  ward      String?
  street    String?
  isDefault Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userID], references: [id])
}

model PasswordReset {
  userID    Int      @unique
  otpHash   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  attempt   Int      @default(0)
  used      Boolean  @default(false)
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([userID])
  @@index([expiresAt])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  permissions RolePermission[]
  User        User[]
}

model Permission {
  id                          Int                           @id @default(autoincrement())
  code                        String                        @unique
  description                 String?
  roles                       RolePermission[]
  ShopStaffPermissionOverride ShopStaffPermissionOverride[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  isActive     Boolean    @default(true)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model SellerProfile {
  id                Int                 @id @default(autoincrement())
  userID            Int                 @unique
  companyName       String
  slug              String?             @unique
  brandName         String?
  businessPhone     String?
  businessAddress   String?
  shopAvatar        String?
  shopBanner        String?
  description       String?
  status            SellerStatusEnum    @default(PENDING)
  rejectionReason   String?
  avgRating         Float               @default(0)
  totalReviews      Int                 @default(0)
  totalFollowers    Int                 @default(0)
  createdAt         DateTime            @default(now())
  createdBy         Int
  updatedAt         DateTime?           @updatedAt
  updatedBy         Int?
  SellerKycDocument SellerKycDocument[]
  user              User                @relation(fields: [userID], references: [id], onDelete: Cascade)
  ShopFollower      ShopFollower[]
  ShopReview        ShopReview[]
  ShopStaff         ShopStaff[]
  Product           Product[]

  @@index([status])
}

model ShopStaff {
  id                          Int                           @id @default(autoincrement())
  userID                      Int
  sellerID                    Int
  createdAt                   DateTime                      @default(now())
  seller                      SellerProfile                 @relation(fields: [sellerID], references: [id], onDelete: Cascade)
  user                        User                          @relation(fields: [userID], references: [id], onDelete: Cascade)
  ShopStaffPermissionOverride ShopStaffPermissionOverride[]

  @@unique([userID, sellerID])
}

model ShopStaffPermissionOverride {
  id           Int        @id @default(autoincrement())
  staffID      Int
  permissionID Int
  isAllowed    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionID], references: [id], onDelete: Cascade)
  staff        ShopStaff  @relation(fields: [staffID], references: [id], onDelete: Cascade)

  @@unique([staffID, permissionID])
}

model ShopFollower {
  id        Int           @id @default(autoincrement())
  userID    Int
  sellerID  Int
  createdAt DateTime      @default(now())
  seller    SellerProfile @relation(fields: [sellerID], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([userID, sellerID])
}

model ShopReview {
  id              Int               @id @default(autoincrement())
  userID          Int
  sellerID        Int
  rating          Int
  comment         String?
  createdAt       DateTime          @default(now())
  ReviewShopImage ReviewShopImage[]
  seller          SellerProfile     @relation(fields: [sellerID], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model ReviewShopImage {
  id           Int        @id @default(autoincrement())
  shopReviewID Int
  url          String
  filename     String
  mimeType     String?
  size         Int?
  createdAt    DateTime   @default(now())
  shopReview   ShopReview @relation(fields: [shopReviewID], references: [id], onDelete: Cascade)
}

model SellerKycDocument {
  id        Int             @id @default(autoincrement())
  sellerID  Int
  type      KycDocumentType
  url       String
  filename  String
  mimeType  String?
  size      Int?
  createdAt DateTime        @default(now())
  seller    SellerProfile   @relation(fields: [sellerID], references: [id], onDelete: Cascade)

  @@unique([sellerID, type])
}

model CategoryShop {
  id               Int             @id @default(autoincrement())
  sellerID         Int
  slug             String          @unique
  image            String?
  name             String
  description      String?
  categoryGlobalId Int?
  CategoryGlobal   CategoryGlobal? @relation(fields: [categoryGlobalId], references: [id], onDelete: Cascade)
  Product          Product[]
}

model CategoryGlobal {
  id           Int            @id @default(autoincrement())
  name         String
  slug         String         @unique
  image        String?
  description  String?
  CategoryShop CategoryShop[]
  Product      Product[]
}

model Product {
  id                  Int              @id @default(autoincrement())
  sellerID            Int
  categoryGlobalID    Int
  categoryShopID      Int?
  title               String
  slug                String
  description         String?
  origin              String?
  brand               String?
  unit                String?
  region              Region[]
  condition           Condition[]
  season              Season[]
  storageInstructions String?
  usageInstructions   String?
  certifications      String?
  stock               Int              @default(0)
  minOrderQty         Int              @default(1)
  basePrice           Float
  isActive            Boolean          @default(true)
  isFeatured          Boolean          @default(false)
  soldCount           Int              @default(0)
  viewCount           Int              @default(0)
  totalReviews        Int              @default(0)
  avgRating           Float            @default(0)
  createdAt           DateTime         @default(now())
  createdBy           Int
  updatedAt           DateTime?        @updatedAt
  isDeleted           Boolean          @default(false)
  updatedBy           Int?
  PricingTier         PricingTier[]
  SellerProfile       SellerProfile    @relation(fields: [sellerID], references: [id], onDelete: Cascade)
  CategoryGlobal      CategoryGlobal   @relation(fields: [categoryGlobalID], references: [id], onDelete: Cascade)
  CategoryShop        CategoryShop?    @relation(fields: [categoryShopID], references: [id], onDelete: Cascade)
  ProductComment      ProductComment[]
  ProductImage        ProductImage[]
  ProductLike         ProductLike[]
  ProductReview       ProductReview[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productID Int
  fileName  String?
  mimeType  String?
  url       String
  altText   String?
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productID], references: [id], onDelete: Cascade)

  @@index([productID])
}

model PricingTier {
  id        Int       @id @default(autoincrement())
  productID Int
  minQty    Int
  price     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  product   Product   @relation(fields: [productID], references: [id], onDelete: Cascade)
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  productID Int
  userID    Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productID], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([productID, userID])
}

model ProductComment {
  id                  Int                   @id @default(autoincrement())
  productID           Int
  userID              Int
  content             String?
  createdAt           DateTime              @default(now())
  product             Product               @relation(fields: [productID], references: [id], onDelete: Cascade)
  user                User                  @relation(fields: [userID], references: [id], onDelete: Cascade)
  ProductCommentImage ProductCommentImage[]
  ProductCommentLike  ProductCommentLike[]
}

model ProductCommentLike {
  id               Int            @id @default(autoincrement())
  productCommentID Int
  userID           Int
  createdAt        DateTime       @default(now())
  productComment   ProductComment @relation(fields: [productCommentID], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model ProductCommentImage {
  id               Int            @id @default(autoincrement())
  productCommentID Int
  url              String
  filename         String
  mimeType         String?
  size             Int?
  createdAt        DateTime       @default(now())
  productComment   ProductComment @relation(fields: [productCommentID], references: [id], onDelete: Cascade)
}

model ProductReview {
  id                 Int                  @id @default(autoincrement())
  productID          Int
  userID             Int
  rating             Int?
  content            String?
  createdAt          DateTime             @default(now())
  product            Product              @relation(fields: [productID], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userID], references: [id], onDelete: Cascade)
  ReviewProductImage ReviewProductImage[]
}

model ReviewProductImage {
  id              Int           @id @default(autoincrement())
  productReviewID Int
  url             String
  filename        String
  mimeType        String?
  size            Int?
  createdAt       DateTime      @default(now())
  productReview   ProductReview @relation(fields: [productReviewID], references: [id], onDelete: Cascade)
}

enum UserStatusEnum {
  ACTIVE
  UNACTIVE
  BLOCKED
}

enum SellerStatusEnum {
  PENDING
  REJECTED
  APPROVED
  SUSPENDED
  BLOCKED
}

enum KycDocumentType {
  ID_CARD_FRONT
  ID_CARD_BACK
  BUSINESS_LICENSE
  FOOD_SAFETY_CERT
}

enum Region {
  MIEN_BAC
  MIEN_TRUNG
  MIEN_NAM
  TAY_NGUYEN
}

enum Condition {
  FRESH
  PROCESSED
  DRIED
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
}

enum NotificationType {
  ORDER_STATUS
  REGISTER_SELLER
  SYSTEM
  NEW_PRODUCT
  CUSTOM
}

enum SenderType {
  SYSTEM
  SHOP
  USER
}

model Notification {
  id         Int         @id @default(autoincrement())
  senderID   Int? // Ai gửi (user/shop/system)
  receiverID Int? // Ai nhận (null = broadcast toàn hệ thống)
  senderType SenderType? // USER | SHOP | SYSTEM

  type      NotificationType @default(SYSTEM)
  title     String
  content   String
  metadata  Json? // Dữ liệu động (vd: { orderId: 123, status: "SHIPPED" })
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  sender    User?            @relation("SentNotifications", fields: [senderID], references: [id], onDelete: Cascade)
  receiver  User?            @relation("ReceivedNotifications", fields: [receiverID], references: [id], onDelete: Cascade)
}
